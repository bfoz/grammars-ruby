RSpec.shared_examples 'Python::Statement::If' do
    it 'must match a simple conditional statement' do
	expect(parser.parse("if a:\n    pass")).to eq([
	    Grammars::Python::Statement.new(
		Grammars::Python::Statement::If.new(
		    'if',
		    Grammars::Python::Expression.new(
			Grammars::Python::Expression::BitwiseXor.new(
			    Grammars::Python::BitwiseAnd.new(
				Grammars::Python::BitwiseShift.new(
				    Grammars::Python::Sum.new(
					Grammars::Python::Term.new(
					    Grammars::Python::Factor.new(
						[],
						Grammars::Python::Factor.last.new(
						    Grammars::Python::Primary.new(
							nil,
							Grammars::Python::Atom.new('a'),
							[]
						    ),
						    nil
						)
					    ),
					    []
					),
					[]
				    ),
				    []
				),
				[]
			    ),
			    []
			),
			[]
		    ),
		    ':',
		    Grammars::Python::Block.new([
			Grammars::Python::Block.last.grammar.new(
			    "\n    ",
			    Grammars::Python::Statement::Simple.new(
				Grammars::Python::SmallStatement.new('pass'),
				[],
				nil
			    )
			)
		    ]),
		    [],
		    nil
		)
	    )
	])
    end

    it 'must parse a nested conditional statement' do
    	expect(parser.parse("if a:\n    pass\n    if b:\n        pass")).to eq([
	    Grammars::Python::Statement.new(
		Grammars::Python::Statement::If.new(
		    'if',
		    Grammars::Python::Expression.new(
			Grammars::Python::Expression::BitwiseXor.new(
			    Grammars::Python::BitwiseAnd.new(
				Grammars::Python::BitwiseShift.new(
				    Grammars::Python::Sum.new(
					Grammars::Python::Term.new(
					    Grammars::Python::Factor.new(
						[],
						Grammars::Python::Factor.last.new(
						    Grammars::Python::Primary.new(
							nil,
							Grammars::Python::Atom.new('a'),
							[]
						    ),
						    nil
						)
					    ),
					    []
					),
					[]
				    ),
				    []
				),
				[]
			    ),
			    []
			),
			[]
		    ),
		    ':',
		    Grammars::Python::Block.new([
			Grammars::Python::Block.last.grammar.new(
			    "\n    ",
			    Grammars::Python::Statement::Simple.new(
				Grammars::Python::SmallStatement.new('pass'),
				[],
				nil
			    )
			),
			Grammars::Python::Block.last.grammar.new(
			    "\n    ",
			    Grammars::Python::Statement.new(

				Grammars::Python::Statement::If.new(
				    'if',
				    Grammars::Python::Expression.new(
					Grammars::Python::Expression::BitwiseXor.new(
					    Grammars::Python::BitwiseAnd.new(
						Grammars::Python::BitwiseShift.new(
						    Grammars::Python::Sum.new(
							Grammars::Python::Term.new(
							    Grammars::Python::Factor.new(
								[],
								Grammars::Python::Factor.last.new(
								    Grammars::Python::Primary.new(
									nil,
									Grammars::Python::Atom.new('b'),
									[]
								    ),
								    nil
								)
							    ),
							    []
							),
							[]
						    ),
						    []
						),
						[]
					    ),
					    []
					),
					[]
				    ),
				    ':',
				    Grammars::Python::Block.new([
					Grammars::Python::Block.last.grammar.new(
					    "\n        ",
					    Grammars::Python::Statement::Simple.new(
						Grammars::Python::SmallStatement.new('pass'),
						[],
						nil
					    )
					)
				    ]),
				    [],
				    nil
				)

			    )
			)
		    ]),
		    [],
		    nil
		)
	    )
	])
    end
end
